vundle을 다운받자
git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim

빔 편집파일을 수정하자. 
~/.vimrc 

#####################################################
vimrc 설정 예제 이 다음칸부터 복사해서 넣어라.
#####################################################

" F2는 탭 열기, Ctrl+h,l로 탭 이동 "
map <F2> :tabnew<CR>
map <C-h> gT
map <C-l> gt

" F3은 저장 "
map <F3> :w!<CR>
map! <F3> <ESC><F3>

" F4는 현재창 닫기 "
map <F4> :q!<CR>

" F5는 TagList 열기 "
map <F5> :TlistToggle<CR>

" Ctrl+e는 디렉토리 목록 열기, Ctrl+Enter로 파일 선택 후 디렉토리 목록 닫기 "
map <C-e> :NERDTree<CR>

" 창 나눔 더블tab 클릭으로 이동 "
map <TAB><TAB> <C-w><C-w>

set number
set ai
set si
set cindent
set shiftwidth=4
set tabstop=4
set ignorecase
set hlsearch
set expandtab
set background=dark
set nocompatible
set fileencodings=utf-8,euc-kr
set bs=indent,eol,start
set history=1000
set ruler
set nobackup
set title
set showmatch
set nowrap
set wmnu
syntax on

filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
    " alternatively, pass a path where Vundle should install plugins
    "call vundle#begin('~/some/path/here')

    " let Vundle manage Vundle, required
    Plugin 'gmarik/Vundle.vim'

    " The following are examples of different formats supported.
    " Keep Plugin commands between vundle#begin/end.
    " plugin on GitHub repo
    Plugin 'tpope/vim-fugitive'
    " plugin from http://vim-scripts.org/vim/scripts.html
    Plugin 'L9'
    " Git plugin not hosted on GitHub
    Plugin 'git://git.wincent.com/command-t.git'
    " git repos on your local machine (i.e. when working on your own plugin)
    Plugin 'file:///home/gmarik/path/to/plugin'
    " The sparkup vim script is in a subdirectory of this repo called vim.
    " Pass the path to set the runtimepath properly.
    Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
    " Avoid a name conflict with L9
    Plugin 'user/L9', {'name': 'newL9'}

    " All of your Plugins must be added before the following line
    call vundle#end()            " required
    filetype plugin indent on    " required
    " To ignore plugin indent changes, instead use:
    "filetype plugin on
    "
    " Brief help
    " :PluginList       - lists configured plugins
    " :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
    " :PluginSearch foo - searches for foo; append `!` to refresh local cache
    " :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
    "
    " see :h vundle for more details or wiki for FAQ
    " Put your non-Plugin stuff after this line
Plugin 'The-NERD-Tree'

#####################################################
샵 위에까지 복해서 넣어라 아래는 다른 내용이다. 
#####################################################
    
vim을 실행한 후에 명령행 모드에서 :PluginInstall을 수행하면 된다. 터미널에서 바로 수행하고 싶다면 아래의 명령어로 수행할 수 있다 :

user$ vim +PluginInstall +qall

1. Search Plugins
Vundle이 정상적으로 설치되었다면 이제 굉장히 쉽게 VI 플러그인을 설치할 수 있다. vim을 실행한 후에 명령행 모드에서 다음과 같이 입력해보자.

:PluginSearch NERD 

2. Add Plugin to ~/.vimrc

이제는 우리가 실제로 설치할 플러그인을 ~/.vimrc에 추가하면 끝이다. 우리가 설치할 플러그인은 저 리스트 중에서 The-NERD-Tree를 설치하면 되니 ~/.vimrc에 Plugin 'The-NERD-Tree'를 추가하면 된다.

user$ echo "Plugin 'The-NERD-Tree'" >> ~/.vimrc

3. Install Plugin
Vundle을 설치할 때와 동일하게 이번에도 vim을 실행하고 명령행 모드에서 :PluginInstall으 수행하면 된다.
 

4. Enjoy with NERDTree

vim을 실행하고 :NERDTreeToggle이라고 한번 실행해보자. vi 왼쪽편에 탐색기 같은 창이 뜨면 완료가 되었다. 즐겁게 코딩하자.

설정파일 


#####################################################
git prompt 설정 아래부터 잘 따라 써 보아라 
#####################################################

git prompt 설정
복사 붙여넣기 하기전 tab이 들어가는 현상을 정상처리 하기 위해
:set paste
복사 후 
:set nopaste


c_cyan=`tput setaf 6`
c_red=`tput setaf 1`
c_green=`tput setaf 2`
c_sgr0=`tput sgr0`

parse_git_branch ()
{
   if git rev-parse --git-dir >/dev/null 2>&1
   then
      gitver=$(git branch 2>/dev/null| sed -n '/^\*/s/^\* //p')
   else
      return 0
   fi
   echo -e $gitver
}

branch_color ()
{
   if git rev-parse --git-dir >/dev/null 2>&1
   then
      color=""
      if git diff --quiet 2>/dev/null >&2
      then
         color="${c_green}"
      else
         color=${c_red}
      fi
   else
      return 0
   fi
   echo -ne $color
}

export PS1='\u@\h\[${c_sgr0}\]:\W\[${c_sgr0}\] (\[$(branch_color)\]$(parse_git_branch)\[${c_sgr0}\])\$ ‘

